require "/usr3/amba/new_anusAraka/prog/get_rt.pl";
require "/usr3/amba/new_anusAraka/prog/gen.pl";
dbmopen(DICT,$ARGV[0],0666);
dbmopen(TAM,$ARGV[1],0666);
if($ARGV[2] eq "TEL") {
require "/usr3/amba/new_anusAraka/telugu/chk_cat_tel.pl";
require "/usr3/amba/new_anusAraka/telugu/get_tel_derived_rt.pl";
}
if($ARGV[2] eq "MAR") {
require "/usr3/amba/new_anusAraka/marathi/chk_cat_mar.pl";
require "/usr3/amba/new_anusAraka/marathi/get_mar_derived_rt.pl";
}
if($ARGV[2] eq "PUN") {
require "/usr3/amba/new_anusAraka/punjabi/chk_cat_pun.pl";
require "/usr3/amba/new_anusAraka/punjabi/get_pun_derived_rt.pl";
}
if($ARGV[2] eq "KAN") {
require "/usr3/amba/new_anusAraka/kannada/chk_cat_kan.pl";
require "/usr3/amba/new_anusAraka/kannada/get_kan_derived_rt.pl";
}
if($ARGV[3] eq "FIRST") { $ALL = 0;}
elsif ($ARGV[3] eq "ALL") { $ALL = 1;}
$| = 1;
local($in,$analysis,$wrd,@anal,$cat,$tam,$rt,$tl_rt,$cnt,$emp,$tl_emp,$tam_emp);
while($in = <STDIN>)
{
chop($in);
($wrd,$analysis) = split(/,/,$in);
print $wrd," ";
#print "ana=",$analysis,"\n";
@anal = split(/\//,$analysis);
$cnt = 0;
foreach $anal (@anal)
{
#print $anal,"\n";
$per = "NW";
$gen = "NW";
$num = "NW";
$tam = "NW";
if($anal =~ /\*(.*)\*/) # Case of noun or verb
{
if($anal =~ /^([^{]*){([nP]) ([^ ]*) ([^ ]*) \*(.*)\* /) # Case of noun
{
$rt1 = $1; $cat = $2; $gen = $3; $num = $4; $tam = $5; $tam_emp = "";
if($tam eq "d") { $tam = 0;}
}
elsif($anal =~ /^([^{]*){([nP]) ([^ ]*) ([^ ]*) \*(.*)\*_([^ ]*) /) # Case of noun + emp
{
$rt1 = $1; $cat = $2; $gen = $3; $num = $4; $tam = $5; $tam_emp = $6;
if($tam eq "d") { $tam = 0;}
}
elsif($anal =~ /^([^{]*){(adj) ([^ ]*) ([^ ]*) \*(.*)\* /) # Case of noun
{
$rt1 = $1; $cat = $2; $gen = $3; $num = $4; $tam = "0"; $tam_emp = "";
if($tam eq "d") { $tam = 0;}
}
elsif($anal =~ /^([^{]*){(adj) ([^ ]*) ([^ ]*) \*(.*)\*_([^ ]*) /) # Case of noun + emp
{
$rt1 = $1; $cat = $2; $gen = $3; $num = $4; $tam = "0"; $tam_emp = $6;
if($tam eq "d") { $tam = 0;}
}
elsif($anal =~ /^([^{]*){P ([^ ]*) \*(.*)\* /) # Case of Pronoun
{
$rt1 = $1; $cat = "P"; $num = $2; $tam = $3; $tam_emp = "";
}
elsif($anal =~ /^([^{]*){P ([^ ]*) \*(.*)\*_([^ ]*) /) # Case of Pronoun + emp
{
$rt1 = $1; $cat = "P"; $num = $2; $tam = $3; $tam_emp = $4;
}
elsif($anal =~ /^([^{]*){v \*(.*)\* ([^ ]*) ([^ ]*) ([^ ]*)/ ) # Case of verb
{
$rt1 = $1; $cat = "v"; $tam = $2; $tam_emp = ""; $gen = $3; $num = $4; $per = $5;
}
elsif($anal =~ /^([^{]*){v \*(.*)\* ([^ ]*) / ) # Case of verb
{
$rt1 = $1; $cat = "v"; $tam = $2; $tam_emp = ""; $gen = $3; 
}
elsif($anal =~ /^([^{]*){v \*(.*)\* / ) # Case of nf verbs
{
$rt1 = $1; $cat = "v"; $tam = $2; $tam_emp = "";
}
elsif($anal =~ /^([^{]*){v \*(.*)\*_([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*)/ ) # Case of verb + emp
{
$rt1 = $1; $cat = "v"; $tam = $2; $tam_emp = $3; $gen = $4; $num = $5; $per = $6;
}
#print $rt1,"\n";
if($rt1 =~ /^(.*)_(.*)$/){ $rt = $1; $rt_emp = "_".$2;
$tl_rt = &get_derived_rt($rt,$cat,$cnt,$rt_emp);
}
else {
$rt = $rt1;$rt_emp = "";
$tl_rt = &get_rt($rt,$cat,$cnt,$ALL);
}
@tl_rts = split(/\//,$tl_rt);
foreach $tl_rt1 (@tl_rts)
{
#print $tl_rt1,$cat,$num,$tam,$TAM{$tam},$tam_emp;
if($num eq "eka") { $num = "s";}
elsif($num eq "bahu") { $num = "p";}
#$| = 1;
$tl_tam = $TAM{$tam};
if($tl_tam =~ /(.*)\~(.*)/) { $tl_tam1 = $1; $tl_tam2 = $2;}
else { $tl_tam1 = $tl_tam; $tl_tam2 = ""; }
#print $tl_rt1,$cat,$num,$tl_tam1;
if($cat eq "adj") { $cat = "n";}
#print $rt," ",$tl_rt1,$cat,$gen,$num,$per,$tl_tam,"##",$tl_tam1,"##\n";
if($rt eq $tl_rt1) { print "1.";}
if($cat eq "v") { print "V.";}
&gen($tl_rt1,$cat,$gen,$num,$per,$tl_tam1);
#print gnp info in curly braces\n";
#print "{",$gen,$num,$per,"}";
if($tl_tam2 ne "") { print "_",$tl_tam2;}
if($tam_emp ne "") { print "_",$tam_emp;}
print "/";
}
#if($TAM{$tam} ne "0") { print "_",$TAM{$tam};}
#if($emp ne "") { print "_",$emp;}
#print "/";
}
else { # case of Avys
$anal =~ s/\/$//;
if($anal =~ /^(.*)_(.*)$/){
$rt = $1;
$emp = "_".$2;
$tl_rt = &get_derived_rt($rt,"avy",$cnt,$emp);
if($rt eq $tl_rt1) { print "1.";}
}
else {
$rt = $anal;$emp = "";
$tl_rt = &get_rt($rt,"avy",$cnt,$ALL);
if($rt eq $tl_rt1) { print "1.";}
}
print $tl_rt,$emp,"/";
}
$cnt++;
}
print "\n";
}
dbmclose(DICT);
dbmclose(TAM);
